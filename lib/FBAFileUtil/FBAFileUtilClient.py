############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class FBAFileUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def excel_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" -> structure:
           parameter "model_file" of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String, parameter
           "model_name" of String, parameter "workspace_name" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        return self._client.call_method(
            'FBAFileUtil.excel_file_to_model',
            [p], self._service_ver, context)

    def sbml_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" -> structure:
           parameter "model_file" of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String, parameter
           "model_name" of String, parameter "workspace_name" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        return self._client.call_method(
            'FBAFileUtil.sbml_file_to_model',
            [p], self._service_ver, context)

    def tsv_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" -> structure:
           parameter "model_file" of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String, parameter
           "model_name" of String, parameter "workspace_name" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        return self._client.call_method(
            'FBAFileUtil.tsv_file_to_model',
            [p], self._service_ver, context)

    def model_to_excel_file(self, model, context=None):
        """
        :param model: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.model_to_excel_file',
            [model], self._service_ver, context)

    def model_to_sbml_file(self, model, context=None):
        """
        :param model: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.model_to_sbml_file',
            [model], self._service_ver, context)

    def model_to_tsv_file(self, model, context=None):
        """
        :param model: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.model_to_tsv_file',
            [model], self._service_ver, context)

    def fba_to_excel_file(self, fba, context=None):
        """
        ****** FBA Result Converters ******
        :param fba: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.fba_to_excel_file',
            [fba], self._service_ver, context)

    def fba_to_tsv_file(self, fba, context=None):
        """
        :param fba: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.fba_to_tsv_file',
            [fba], self._service_ver, context)

    def tsv_file_to_media(self, context=None):
        """
        ****** Media Converters *********
        """
        return self._client.call_method(
            'FBAFileUtil.tsv_file_to_media',
            [], self._service_ver, context)

    def media_to_tsv_file(self, media, context=None):
        """
        :param media: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.media_to_tsv_file',
            [media], self._service_ver, context)

    def tsv_file_to_phenotype_set(self, context=None):
        """
        ****** Phenotype Data Converters *******
        """
        return self._client.call_method(
            'FBAFileUtil.tsv_file_to_phenotype_set',
            [], self._service_ver, context)

    def phenotype_set_to_tsv_file(self, phenotype, context=None):
        """
        :param phenotype: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.phenotype_set_to_tsv_file',
            [phenotype], self._service_ver, context)

    def phenotype_simulation_set_to_excel_file(self, pss, context=None):
        """
        :param pss: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.phenotype_simulation_set_to_excel_file',
            [pss], self._service_ver, context)

    def phenotype_simulation_set_to_tsv_file(self, pss, context=None):
        """
        :param pss: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.phenotype_simulation_set_to_tsv_file',
            [pss], self._service_ver, context)

    def phenotype_simulation_set_to_excel_file(self, pss, context=None):
        """
        :param pss: instance of type "ObjectSelection" -> structure:
           parameter "workspace_name" of String, parameter "model_name" of
           String
        :returns: instance of type "File" (***** FBA Model Converters
           *******) -> structure: parameter "path" of String
        """
        return self._client.call_method(
            'FBAFileUtil.phenotype_simulation_set_to_excel_file',
            [pss], self._service_ver, context)
